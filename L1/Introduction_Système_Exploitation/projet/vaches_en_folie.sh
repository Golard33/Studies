#!/bin/bash

#------------------------------------------------------
# Projet L1 - Introduction aux Systèmes d'Exploitations
#------------------------------------------------------

# Remplacer les noms par les vôtres
auteurs="M.JANKOWIAK et C.CAUSSE"

# Les fichiers générés par le script
fichier_rst="vaches_en_folie.rst"
fichier_html="vaches_en_folie.html"
fichier_pdf="vaches_en_folie.pdf"

#images des vaches
echo "-- Téléchargement des images --"
wget -O Les_vaches.jpg   https://i.imgur.com/yIBMMzL.jpg
wget -O La_lourdaise.jpg https://i.imgur.com/rsgjo74.jpg
wget -O La_normande.jpg  https://i.imgur.com/2y9VGy8.jpg


echo "Génération de ${fichier_rst}"

# Insertion d'un bloc de texte dans fichier_rst.
# Le texte concerné est compris entre les deux mots BLOC.
cat > ${fichier_rst}  << BLOC

===============
Vaches en folie
===============
----------------------------------------------------
Projet d\'Introduction aux Systèmes d\'Exploitations
----------------------------------------------------

:Auteurs: *${auteurs}*
:Généré par: *$(whoami)*

Ce document a été généré  à partir du fichier \`\`vaches_en_folie.rst\`\` au
format \`reStructuredText\`_ lui-même créé par le script
\`\`vaches_en_folie.sh\`\`. Ce fichier  rst a  ensuite  été  converti en
HTML  et  PDF avec  les commandes \`\`rst2html\`\` et \`\`rst2pdf\`\`.

.. _reStructuredText: https://aful.org/wikis/interop/ReStructuredText

.. sidebar:: Références

   Les directives du format RST sont disponibles \`ici\`_.

.. _ici: http://docutils.sourceforge.net/docs/ref/rst/directives.html

L\'objectif est de compléter le script \`\`vaches_en_folie.sh\`\` afin que les
documents générés ressemblent le plus fidèlement possible au modèle fourni.

Une vache : Définition
======================

**Vache** est le nom vernaculaire donné à la femelle du **taureau** et à la mère du **veau** des bovins. C'est un
ruminant appartenant à la famille des bovidés, généralement porteur de cornes sur le front. Une **génisse**
ou **vachette** est une vache qui n'a pas vêlé. La vache *beugle*, *meugle* ou *mugit* tout en produisant du lait
et des bouses. Vache se dit *cow* in English.

 .. figure:: Les_vaches.jpg
    :alt: Vaches sous des pommiers
    :scale: 200%

    **Figure :** Trois normandes devisent du sens de la vie sous les poiriers en fleurs.






Quelques races bovines
----------------------
+-----------------------------------+--------------------------------+
| **Races et liens vers site web**  | **Image**                      |
+===================================+================================+
| La Lourdaise_                     | .. image:: ./La_lourdaise.jpg  |
+-----------------------------------+--------------------------------+
| La Normande_                      | .. image:: ./La_normande.jpg   |
+-----------------------------------+--------------------------------+

.. _Lourdaise: https://fr.wikipedia.org/wiki/Lourdaise
.. _Normande: https://fr.wikipedia.org/wiki/Normande


Vaches et systèmes d'exploitation
---------------------------------

Sous **GNU/Linux**, les vaches peuvent s'exprimer avec les commandes \`\`cowthink\`\` et \`\`cowsay\`\`.


Transformation bovine
=====================
**Les vaches sont coquettes !**

.. sidebar:: Indications

    Les quatre vignettes utilisent la vache par défaut de la commande \`\`cowsay\`\`. Les différences sont obtenues en filtrant le flux de sortie pour remplacer des caractères par d'autres. Votre mission consiste à élaborer une succession de filtres qui reproduise les vignettes au caractère près.


::

BLOC

cowsay "Je suis une vache originale" | awk '{printf " %-35s\n", $0}' | tr ' ' ' '  > vache0.txt
cowsay "On m'a filtrée !" | awk '{printf " %-35s\n", $0}' | tr 'o' 'p' | tr '^' 'o' | tr 'p' '^' | tr '_' '~' | tr '|' 'l' | tr '-' '~' | tr ')' '}' | tr '(' '{'  > vache1.txt
cowsay "À mzi les nzuvelles mamelles !" | awk '{printf " %-35s\n", $0}' | tr '-' '~' | tr '_' '~' | tr '^' 'n' | tr 'o' '*' | tr '|' 'l' | tr ')' '}' | tr 'z' 'o' | sed 's/~w/uu/' | tr '(' '{' > vache2.txt
cowthink "Une queue de lapin ?!" | awk '{printf " %-35s\n", $0}' | sed 's/oo/oO/' | tr '^' 'n' | tr '_' '~' | tr '|' 'l' | sed 's#\\\/\\#@#g' | tr '(' '{' | tr ')' '}' > vache3.txt


paste -d':' vache0.txt vache1.txt >> ${fichier_rst}

paste -d '.' point.txt >>  ${fichier_rst}

paste -d ':' vache2.txt vache3.txt >> ${fichier_rst}
rm -f vache*.txt


.. include:: vache2.txt
#---
cat >> ${fichier_rst}  << BLOC

.. Note::

    **Attention !**

    Veuillez noter que chaque ligne de chaque vignette doit commencer par un espace.



Ambition batracienne
====================




C'est l'histoire du crapaud qui rêvait de devenir aussi gros qu'un **boeuf...**

.. sidebar:: Indications

   L'option -f permet de choisir le personnage qui parle ou pense. Tous les fichiers sont disponibles dans le dossier \`\`/usr/share/cowsay/cows/\`\`.

::

BLOC

  cowsay "Je suis le plus gros des crapauds !" | cowthink -n -f bud-frogs | awk '{printf " %-35s\n", $0}' > vache0.txt
  paste vache0.txt >> ${fichier_rst}
rm -f vache0*.txt


#---
cat >> ${fichier_rst}  << BLOC


**Notez** que le message est lui-même ce que dit la vache !



Tableau de famille
====================

Voici quelques membres de la famille insérés dans un tableau RST.

BLOC

echo +-------------------------------------------------+-------------------------------------------------+ > ligne.txt
echo "" > vide.txt

paste -d ' ' ligne.txt >> ${fichier_rst}

echo -e "::\n" | awk '{printf " %-48s\n", $0}' > vache0.txt
cowsay "123" | sed '1d'| sed '1d'| sed '1d'| awk '{printf " %-48s\n", $0}' >>vache0.txt
echo ""|awk '{printf " %-48s\n", $0}' >> vache0.txt
echo "La Maman" | awk '{printf " %-48s\n", $0}' >> vache0.txt


echo -e "::\n" | awk '{printf " %-48s\n", $0}' > vache1.txt
cowsay -f www.cow ' ' | sed '1d'| sed '1d'| sed '1d'| awk '{printf " %-48s\n", $0}' >>vache1.txt
echo ""|awk '{printf " %-48s\n", $0}' >> vache1.txt
echo "La Tatie Web" | awk '{printf " %-48s\n", $0}' >> vache1.txt

paste -d '|' vide.txt vache0.txt vache1.txt vide.txt >> ${fichier_rst}
paste -d ' ' ligne.txt >> ${fichier_rst}


echo -e "::\n" | awk '{printf " %-48s\n", $0}' > vache2.txt
echo "       \  "|awk '{printf " %-48s\n", $0}' >> vache2.txt
cowsay -f three-eyes.cow " " | sed '1d'| sed '1d'| sed '1d'| awk '{printf " %-48s\n", $0}' >>vache2.txt
echo ""| awk '{printf " %-48s\n", $0}' >> vache2.txt
echo "La Mamie qui voit tout           " | awk '{printf " %-48s\n", $0}' >> vache2.txt



echo -e "::\n" | awk '{printf " %-48s\n", $0}' > vache3.txt
cowsay -f moose " " | sed '1d'| sed '1d'| sed '1d'| sed '1d'|awk '{printf " %-47s\n", $0}' | awk '{printf " %-48s\n", $0}'>>vache3.txt
echo ""| awk '{printf " %-48s\n", $0}' >> vache3.txt
echo "La soeur (qui a eu des problèmes avec son mari)"| awk '{printf " %-48s\n", $0}' >> vache3.txt


paste -d '|' vide.txt vache2.txt vache3.txt vide.txt >> ${fichier_rst}
paste -d ' ' ligne.txt >> ${fichier_rst}


rm -fr vache*.text
rm -fr ligne.text
rm -fr texte.text
rm -fr vide.text

cat >> ${fichier_rst} << BLOC

Mascotte personnelle
====================

Voici la mascotte que nous avons dessinée en ascii art et sauvegardée dans le fichier mascotte.cow en prenant exemple sur les fichiers disponibles dans le dossier /usr/share/cowsay/cows/

::

BLOC
cowsay -f ./mascotte.cow "Je suis la mascotte de ${auteurs}" | awk '{printf " %-40s\n", $0}' >> ${fichier_rst}


echo | awk '{printf " %-35s\n", $0}' > mascotte.txt
echo  "         \                                                       "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "          \                                                      "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "           \                                \|//                 "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                                      _.-~~~~~~~~~-._            "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                      ___.----._    /~               ~\          "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                  .-~          ~\/'                   ~\         "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                 /~              ;                       \       "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                ;               ;                                "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "               (               ;                           ;     "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "              (                |                |          |     "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "              )                |         |      |          |     "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "             (  /\   |      /  |         |       \     |   '     "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "             )   | \_  \   ,,;':   |\     \ , ', ,,   /   ;      "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "            (    |   ~-.` `     |  |  \' ``'       ' ',, ;       "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "            )    |           |\  |/                      ~\      "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "            (   _|  /|       (_)(~|  /|        |\         |      "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "            )  ( | (_)  .--.     \: (_)   __   (_)      _/       "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "            (   `@!              `:                   /~         "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "            \     '\_   .___.   _/' \               .'           "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "             (       ~-.___...-~     '-._.    . _.-~             "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "              )        /(____/~/@~\   /~\~'--~)\                 "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "              (      /@'--..--'   @\(' / |~~~'\ |\               "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "               (__.-< )       ) @   )  |_|    |_||               "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                    /@|      (@    /   (_)-..-(_)'\              "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                   (  \      \_  @|    ')       <  |             "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                   >  @)   __/ @  \    /\_     , ~\              "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                  /@  _> (~ ~\   @|/\     ~\_/''/) )             "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                  \_@/ /~~\@       \/       ||   )'              "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "              _.-~  \ (/   )_ @_.-'/~\_   _/-'~-~  '\            "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "             /~       ~'-'~~  ~~/  /    ~~~     //\   )          "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "            |     /          _.'  ,|            \/'|  |          "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "            |    /         /~__.-~  \_              \ |          "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "             ~-._|        _/ /  ~----~ ~-.__         )  \        "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "             /   /~-.__./~  ')     |        ~~(      \  |        "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "            '~-|_          < |    |   |      |       > |         "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "               _-~--.__   _/'     |         <        |-'         "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "              (  ,-/__ ~~)        ;\.    |   |  __.--~-.|        "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "              '~(____.--~  |    ;   `.    | `~~(___ '''~)        "| awk '{printf " %-35s\n", $0}' >> mascotte.txt
echo  "                    /  |       ;      \           \~~~/~         "| awk '{printf " %-35s\n", $0}' >> mascotte.txt




paste -d '' mascotte.txt >> ${fichier_rst}
rm -fr mascotte.text

cat >> ${fichier_rst} << BLOC

L'évaluation tiendra compte de la qualité de la réalisation de la mascotte.

BLOC



# Génération des formats HTML et PDF

echo "Génération de ${fichier_html}"
rst2html -d -t -s ${fichier_rst} ${fichier_html}

echo "Génération de ${fichier_pdf}"
rst2pdf           ${fichier_rst} ${fichier_pdf}
