library libraryArbreForet
%%****************************************************
%%	TYPE ABSTRAIT ARBRE GENERAL PLANAIRE
%%	Objet: Spécification Algébrique en CASL
%%	Prouvée par: HETS(Isabelle)
%%
%%	Date création le 12/3/2004
%%	Auteur: K. OURIACHI, Professeur des universités
%%	UNIVERSITE de PAU/PAYS de l'ADOUR
%%
%%****************************************************
%% liste des importations (downloading)
from Basic/Numbers get Nat, Int

spec ARBRE0 [sort Elem] given Int =
generated type Foret[Arbre[Elem]] ::= foretVide |
				      planter(Arbre[Elem];Int;Foret[Arbre[Elem]]);
	       Arbre[Elem]::= arbreVide | 
	       		      construire(racine:? Elem; listeSousArbres:? Foret[Arbre[Elem]])
		
		
end


spec ARBRE [sort Elem] =
    	ARBRE0 [sort Elem]
then
preds
	estArbreVide: Arbre[Elem];
	estForetVide: Foret[Arbre[Elem]]
	
ops
	
	racine:Arbre[Elem] ->?Elem;
	listeSousArbres:Arbre[Elem] ->? Foret[Arbre[Elem]];
	nombreArbres:Foret[Arbre[Elem]] -> Int;
	iemeArbre: Foret[Arbre[Elem]] * Int ->? Arbre[Elem]
	
forall A1:Arbre[Elem]; F1:Foret[Arbre[Elem]]; i1,k1:Int; e1:Elem
	. def racine(A1) <=> not estArbreVide(A1)
	. def listeSousArbres(A1) <=> not estArbreVide(A1)
	. def iemeArbre(F1,i1) <=> not i1>0 /\ i1< nombreArbres(F1)+1
	. estArbreVide(arbreVide)
	. not estArbreVide(construire(e1,F1))
	. estForetVide(foretVide)
	. not estForetVide(planter(A1,i1,F1))
%% observateur racine
	. racine(construire(e1,F1)) = e1
%% constructeur listeASousArbres
	. listeSousArbres(construire(e1,F1)) = F1
%% observateur nombreArbres
	. nombreArbres(foretVide) = 0
	. nombreArbres(planter(A1,i1,F1)) = nombreArbres(F1)+1
%% constructeur iemeArbres
	. i1=k1 => iemeArbre(planter(A1,i1,F1),k1) = A1
	. 0< k1 /\ k1 < i1 => iemeArbre(planter(A1,i1,F1),k1) = iemeArbre(F1,k1)
	. i1 < k1 /\ k1 < nombreArbres(F1)+2 => iemeArbre(planter(A1,i1,F1),k1) = iemeArbre(F1,k1)

end
